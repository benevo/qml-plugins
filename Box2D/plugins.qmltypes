import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Box2D 2.0 D:\devel\IDE\Qt\src\modules\qml\Box2D'

Module {
    dependencies: []
    Component {
        name: "Box2DBody"
        defaultProperty: "fixtures"
        prototype: "QObject"
        exports: ["Box2D/Body 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "BodyType"
            values: {
                "Static": 0,
                "Kinematic": 1,
                "Dynamic": 2
            }
        }
        Property { name: "world"; type: "Box2DWorld"; isPointer: true }
        Property { name: "target"; type: "QQuickItem"; isPointer: true }
        Property { name: "linearDamping"; type: "float" }
        Property { name: "angularDamping"; type: "float" }
        Property { name: "bodyType"; type: "BodyType" }
        Property { name: "bullet"; type: "bool" }
        Property { name: "sleepingAllowed"; type: "bool" }
        Property { name: "fixedRotation"; type: "bool" }
        Property { name: "active"; type: "bool" }
        Property { name: "awake"; type: "bool" }
        Property { name: "linearVelocity"; type: "QPointF" }
        Property { name: "angularVelocity"; type: "float" }
        Property { name: "fixtures"; type: "Box2DFixture"; isList: true; isReadonly: true }
        Property { name: "gravityScale"; type: "float" }
        Signal { name: "bodyCreated" }
        Signal { name: "positionChanged" }
        Method {
            name: "applyForce"
            Parameter { name: "force"; type: "QPointF" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "applyForceToCenter"
            Parameter { name: "force"; type: "QPointF" }
        }
        Method {
            name: "applyTorque"
            Parameter { name: "torque"; type: "double" }
        }
        Method {
            name: "applyLinearImpulse"
            Parameter { name: "impulse"; type: "QPointF" }
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "applyAngularImpulse"
            Parameter { name: "impulse"; type: "double" }
        }
        Method { name: "getWorldCenter"; type: "QPointF" }
        Method { name: "getLocalCenter"; type: "QPointF" }
        Method { name: "getMass"; type: "float" }
        Method { name: "resetMassData" }
        Method { name: "getInertia"; type: "float" }
        Method {
            name: "toWorldPoint"
            type: "QPointF"
            Parameter { name: "localPoint"; type: "QPointF" }
        }
        Method {
            name: "toWorldVector"
            type: "QPointF"
            Parameter { name: "localVector"; type: "QPointF" }
        }
        Method {
            name: "toLocalPoint"
            type: "QPointF"
            Parameter { name: "worldPoint"; type: "QPointF" }
        }
        Method {
            name: "toLocalVector"
            type: "QPointF"
            Parameter { name: "worldVector"; type: "QPointF" }
        }
        Method {
            name: "getLinearVelocityFromWorldPoint"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "getLinearVelocityFromLocalPoint"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "addFixture"
            Parameter { name: "fixture"; type: "Box2DFixture"; isPointer: true }
        }
    }
    Component {
        name: "Box2DBox"
        prototype: "Box2DFixture"
        exports: ["Box2D/Box 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "rotation"; type: "double" }
    }
    Component {
        name: "Box2DChain"
        prototype: "Box2DFixture"
        exports: ["Box2D/Chain 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertices"; type: "QVariantList" }
        Property { name: "loop"; type: "bool" }
        Property { name: "prevVertex"; type: "QPointF" }
        Property { name: "nextVertex"; type: "QPointF" }
    }
    Component {
        name: "Box2DCircle"
        prototype: "Box2DFixture"
        exports: ["Box2D/Circle 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "radius"; type: "float" }
    }
    Component {
        name: "Box2DContact"
        prototype: "QObject"
        exports: ["Box2D/Contact 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "enabled"; type: "bool" }
        Property { name: "fixtureA"; type: "Box2DFixture"; isReadonly: true; isPointer: true }
        Property { name: "fixtureB"; type: "Box2DFixture"; isReadonly: true; isPointer: true }
        Property { name: "childIndexA"; type: "int"; isReadonly: true }
        Property { name: "childIndexB"; type: "int"; isReadonly: true }
        Property { name: "friction"; type: "double" }
        Property { name: "restitution"; type: "double" }
        Property { name: "tangentSpeed"; type: "double" }
        Method { name: "isTouching"; type: "bool" }
        Method { name: "resetFriction" }
        Method { name: "resetRestitution" }
    }
    Component {
        name: "Box2DDebugDraw"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Box2D/DebugDraw 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "DebugFlag"
            values: {
                "Shape": 1,
                "Joint": 2,
                "AABB": 4,
                "Pair": 8,
                "CenterOfMass": 16,
                "Everything": 31
            }
        }
        Property { name: "axisScale"; type: "double" }
        Property { name: "flags"; type: "DebugFlag" }
        Property { name: "world"; type: "Box2DWorld"; isPointer: true }
    }
    Component {
        name: "Box2DDistanceJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/DistanceJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "length"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "dampingRatio"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DEdge"
        prototype: "Box2DFixture"
        exports: ["Box2D/Edge 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertices"; type: "QVariantList" }
    }
    Component {
        name: "Box2DFixture"
        prototype: "QObject"
        exports: ["Box2D/Fixture 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CategoryFlag"
            values: {
                "Category1": 1,
                "Category2": 2,
                "Category3": 4,
                "Category4": 8,
                "Category5": 16,
                "Category6": 32,
                "Category7": 64,
                "Category8": 128,
                "Category9": 256,
                "Category10": 512,
                "Category11": 1024,
                "Category12": 2048,
                "Category13": 4096,
                "Category14": 8192,
                "Category15": 16384,
                "Category16": 32768,
                "All": 65535,
                "None": 0
            }
        }
        Enum {
            name: "CategoryFlags"
            values: {
                "Category1": 1,
                "Category2": 2,
                "Category3": 4,
                "Category4": 8,
                "Category5": 16,
                "Category6": 32,
                "Category7": 64,
                "Category8": 128,
                "Category9": 256,
                "Category10": 512,
                "Category11": 1024,
                "Category12": 2048,
                "Category13": 4096,
                "Category14": 8192,
                "Category15": 16384,
                "Category16": 32768,
                "All": 65535,
                "None": 0
            }
        }
        Property { name: "density"; type: "float" }
        Property { name: "friction"; type: "float" }
        Property { name: "restitution"; type: "float" }
        Property { name: "sensor"; type: "bool" }
        Property { name: "categories"; type: "CategoryFlags" }
        Property { name: "collidesWith"; type: "CategoryFlags" }
        Property { name: "groupIndex"; type: "int" }
        Signal {
            name: "beginContact"
            Parameter { name: "other"; type: "Box2DFixture"; isPointer: true }
        }
        Signal {
            name: "endContact"
            Parameter { name: "other"; type: "Box2DFixture"; isPointer: true }
        }
        Method { name: "getBody"; type: "Box2DBody*" }
    }
    Component {
        name: "Box2DFrictionJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/FrictionJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "maxForce"; type: "float" }
        Property { name: "maxTorque"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DGearJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/GearJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "joint1"; type: "Box2DJoint"; isPointer: true }
        Property { name: "joint2"; type: "Box2DJoint"; isPointer: true }
        Property { name: "ratio"; type: "float" }
    }
    Component {
        name: "Box2DJoint"
        prototype: "QObject"
        exports: ["Box2D/Joint 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "JointType"
            values: {
                "UnknownJoint": 0,
                "RevoluteJoint": 1,
                "PrismaticJoint": 2,
                "DistanceJoint": 3,
                "PulleyJoint": 4,
                "MouseJoint": 5,
                "GearJoint": 6,
                "WheelJoint": 7,
                "WeldJoint": 8,
                "FrictionJoint": 9,
                "RopeJoint": 10,
                "MotorJoint": 11
            }
        }
        Property { name: "jointType"; type: "JointType"; isReadonly: true }
        Property { name: "collideConnected"; type: "bool" }
        Property { name: "bodyA"; type: "Box2DBody"; isPointer: true }
        Property { name: "bodyB"; type: "Box2DBody"; isPointer: true }
        Signal { name: "created" }
    }
    Component {
        name: "Box2DMotorJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/MotorJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "linearOffset"; type: "QPointF" }
        Property { name: "angularOffset"; type: "float" }
        Property { name: "maxForce"; type: "float" }
        Property { name: "maxTorque"; type: "float" }
        Property { name: "correctionFactor"; type: "float" }
    }
    Component {
        name: "Box2DMouseJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/MouseJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "target"; type: "QPointF" }
        Property { name: "maxForce"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "dampingRatio"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DPolygon"
        prototype: "Box2DFixture"
        exports: ["Box2D/Polygon 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "vertices"; type: "QVariantList" }
    }
    Component {
        name: "Box2DPrismaticJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/PrismaticJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "localAxisA"; type: "QPointF" }
        Property { name: "referenceAngle"; type: "float" }
        Property { name: "enableLimit"; type: "bool" }
        Property { name: "lowerTranslation"; type: "float" }
        Property { name: "upperTranslation"; type: "float" }
        Property { name: "enableMotor"; type: "bool" }
        Property { name: "maxMotorForce"; type: "float" }
        Property { name: "motorSpeed"; type: "float" }
        Method { name: "getJointTranslation"; type: "float" }
        Method { name: "getJointSpeed"; type: "float" }
    }
    Component {
        name: "Box2DProfile"
        prototype: "QObject"
        exports: ["Box2D/Profile 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "step"; type: "float"; isReadonly: true }
        Property { name: "collide"; type: "float"; isReadonly: true }
        Property { name: "solve"; type: "float"; isReadonly: true }
        Property { name: "solveInit"; type: "float"; isReadonly: true }
        Property { name: "solveVelocity"; type: "float"; isReadonly: true }
        Property { name: "solvePosition"; type: "float"; isReadonly: true }
        Property { name: "broadphase"; type: "float"; isReadonly: true }
        Property { name: "solveTOI"; type: "float"; isReadonly: true }
        Property { name: "synchronize"; type: "float"; isReadonly: true }
        Property { name: "emitSignals"; type: "float"; isReadonly: true }
    }
    Component {
        name: "Box2DPulleyJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/PulleyJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "groundAnchorA"; type: "QPointF" }
        Property { name: "groundAnchorB"; type: "QPointF" }
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "lengthA"; type: "float" }
        Property { name: "lengthB"; type: "float" }
        Property { name: "ratio"; type: "float" }
        Method { name: "getCurrentLengthA"; type: "float" }
        Method { name: "getCurrentLengthB"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DRayCast"
        prototype: "QObject"
        exports: ["Box2D/RayCast 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "maxFraction"; type: "float" }
        Signal {
            name: "fixtureReported"
            Parameter { name: "fixture"; type: "Box2DFixture"; isPointer: true }
            Parameter { name: "point"; type: "QPointF" }
            Parameter { name: "normal"; type: "QPointF" }
            Parameter { name: "fraction"; type: "double" }
        }
    }
    Component {
        name: "Box2DRevoluteJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/RevoluteJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "referenceAngle"; type: "float" }
        Property { name: "enableLimit"; type: "bool" }
        Property { name: "lowerAngle"; type: "float" }
        Property { name: "upperAngle"; type: "float" }
        Property { name: "enableMotor"; type: "bool" }
        Property { name: "motorSpeed"; type: "float" }
        Property { name: "maxMotorTorque"; type: "float" }
        Method { name: "getJointAngle"; type: "float" }
        Method { name: "getJointSpeed"; type: "float" }
    }
    Component {
        name: "Box2DRopeJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/RopeJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "maxLength"; type: "float" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
    }
    Component {
        name: "Box2DWeldJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/WeldJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "referenceAngle"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "dampingRatio"; type: "float" }
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
    }
    Component {
        name: "Box2DWheelJoint"
        prototype: "Box2DJoint"
        exports: ["Box2D/WheelJoint 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "localAnchorA"; type: "QPointF" }
        Property { name: "localAnchorB"; type: "QPointF" }
        Property { name: "localAxisA"; type: "QPointF" }
        Property { name: "dampingRatio"; type: "float" }
        Property { name: "frequencyHz"; type: "float" }
        Property { name: "maxMotorTorque"; type: "float" }
        Property { name: "motorSpeed"; type: "float" }
        Property { name: "enableMotor"; type: "bool" }
        Method {
            name: "getReactionForce"
            type: "QPointF"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method {
            name: "getReactionTorque"
            type: "float"
            Parameter { name: "inv_dt"; type: "float32" }
        }
        Method { name: "getJointTranslation"; type: "float" }
        Method { name: "getJointSpeed"; type: "float" }
    }
    Component {
        name: "Box2DWorld"
        prototype: "QObject"
        exports: ["Box2D/World 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "running"; type: "bool" }
        Property { name: "timeStep"; type: "float" }
        Property { name: "velocityIterations"; type: "int" }
        Property { name: "positionIterations"; type: "int" }
        Property { name: "gravity"; type: "QPointF" }
        Property { name: "autoClearForces"; type: "bool" }
        Property { name: "profile"; type: "Box2DProfile"; isReadonly: true; isPointer: true }
        Property { name: "pixelsPerMeter"; type: "float" }
        Property { name: "enableContactEvents"; type: "bool" }
        Signal {
            name: "preSolve"
            Parameter { name: "contact"; type: "Box2DContact"; isPointer: true }
        }
        Signal {
            name: "postSolve"
            Parameter { name: "contact"; type: "Box2DContact"; isPointer: true }
        }
        Signal { name: "stepped" }
        Method { name: "step" }
        Method { name: "clearForces" }
        Method {
            name: "rayCast"
            Parameter { name: "rayCast"; type: "Box2DRayCast"; isPointer: true }
            Parameter { name: "point1"; type: "QPointF" }
            Parameter { name: "point2"; type: "QPointF" }
        }
    }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
}
